<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
				           http://www.springframework.org/schema/context
				           http://www.springframework.org/schema/context/spring-context-3.2.xsd
				           http://www.springframework.org/schema/tx 
				           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
    
    <!-- 加载配置JDBC文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close" lazy-init="false">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxTotal" value="${jdbc.maxActive}" />
		<property name="maxWaitMillis" value="${jdbc.maxWait}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
	</bean>
	
    

    <context:component-scan base-package="com.paic"/>  
    
    <!-- 在使用mybatis时 spring使用sqlsessionFactoryBean 来管理mybatis的sqlsessionFactory-->
    <!-- 而像这种使用接口实现的方式 是使用sqlsessionTemplate来进行操作的，他提供了一些方法 -->
    <bean id="sqlSessionFactory"  class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"/>
    
    	<!-- mybatis配置文件路径-->
    	<property name="configLocation"  value="classpath:config/pluto.mybatis.xml"/>
    </bean>
    
   
    <!-- -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.paic.**.dao"></property>
    	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
     
    <!-- 事务 需要三件事才可以  一具体的事务实现  二事务管理器  三  aop 事务控制  不起作用-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    
        <property name="dataSource" ref="dataSource" />    
    </bean>
    
   <!-- 使用全注释事务-->
    <tx:annotation-driven transaction-manager="transactionManager" />
     
     
    <!-- redis
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	    <property name="maxTotal">
    		<value>${redis.pool.maxTotal}</value>
    	</property>
	    <property name="maxIdle">
    		<value>${redis.pool.maxIdle}</value>
    	</property>
    	<property name="testOnBorrow" value="true"></property>
	    <property name="testOnReturn" value="true"></property>
	</bean>
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" scope="singleton">
		<constructor-arg index="0" ref="jedisPoolConfig"></constructor-arg>
		<constructor-arg index="1">
			<list>
			    <bean class="redis.clients.jedis.JedisShardInfo">
			    	<constructor-arg name="host" value="${redis.uri}"></constructor-arg>
			    </bean>
			</list>
		</constructor-arg>
	</bean>
	  -->
</beans>