package com.paic.pawj.investigation.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.paic.pawj.common.dto.JsonBearObject;
import com.paic.pawj.investigation.dao.Investigation;
import com.paic.pawj.investigation.service.InvestigationService;

@Controller
@RequestMapping("/investigation/")
public class InvestigationController {

	private static final Log LOG = LogFactory.getLog(InvestigationController.class);

	@Autowired
	InvestigationService investigationService;

	@RequestMapping("queryInvestigation.do")
	@ResponseBody
	public String queryInvestigation(@RequestParam("page") int page, @RequestParam("rows") int rows,
			Investigation investigation) {
		Gson gson = new Gson();
		investigation.setStart((page - 1) * rows);
		investigation.setPageSize(rows);
		return gson.toJson(investigationService.queryInvestigation(investigation));

	}

	@RequestMapping("saveInvestigation.do")
	@ResponseBody
	public String saveInvestigation(Investigation investigation,
			@RequestParam(value = "isAdd", defaultValue = "false") String isAdd) {
		Gson gson = new Gson();
		return gson.toJson(investigationService.saveInvestigation(investigation, isAdd));
	}

	@RequestMapping("delInvestigation.do")
	@ResponseBody
	public String deleteInvestigation(@RequestParam("idListStr") String idListStr) {
		Gson gson = new Gson();
		List<String> idList = new ArrayList<String>();
		for (String id : idListStr.split(",")) {
			idList.add(id);
		}
		return gson.toJson(investigationService.deleteQuestion(idList));
	}

	@RequestMapping("queryQuestionInfo.do")
	@ResponseBody
	public String queryQuestionInfo(@RequestParam("qsrId") String qsrId) {
		Gson gson = new Gson();
		return gson.toJson(investigationService.queryQuestionInfo(qsrId));
	}

	@RequestMapping(value = "saveSubQuestion.do")
	@ResponseBody
	public String saveSubQuestion(@RequestBody JsonBearObject jsonBearObject) {
		investigationService.saveSubQuestion(jsonBearObject.getJsonData());
		return "{\"ret\":\"success\"}";
	}

	@RequestMapping(value = "login.do")
	@ResponseBody
	public String addInvestigation(@RequestParam("userId") String userId, @RequestParam("password") String password,
			HttpSession session) {
		Gson gson = new Gson();
		Map<String,String> map = new HashMap<String,String>();
		if ("admin".equals(userId) && "admin123".equals(password)) {
			session.setAttribute("login_flag", "true");
			map.put("loginResult", "success");
		}
		return gson.toJson(map);
	}

}
