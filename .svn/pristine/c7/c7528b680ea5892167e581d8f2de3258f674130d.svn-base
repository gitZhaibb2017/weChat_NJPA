package com.paic.pawj.basic.user.servie.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.paic.pawj.auth.common.contants.AuthContants;
import com.paic.pawj.basic.user.common.contants.UserInfoContants;
import com.paic.pawj.basic.user.dao.UserMapper;
import com.paic.pawj.basic.user.dto.UserInfo;
import com.paic.pawj.basic.user.servie.UserInfoService;
import com.paic.pawj.common.util.CommonUtil;

/**
 * Description:用户信息操作
 * 
 * @author pc1
 * @version: 
 */
@Service("userInfoService")
public class UserInfoServiceImpl implements UserInfoService {
	
	public static final Log LOG = LogFactory.getLog(UserInfoServiceImpl.class);
	
	@Resource
	private UserMapper userMapper;
	
	/**
	 * 上传文件返回前缀路径
	 */
	@Value("${pawj.perfixUrl}")
	private String perfixUrl;

	/**
	 * 上传文件返回前缀路径
	 */
	@Value("${pawj.defaultIcon}")
	private String defaultIcon;
	 
	/**
	 * Description:查询用户信息
	 * 
	 * @param userId
	 * @param pwd
	 * @return
	 */
	@Override
	public UserInfo queryUserInfo(UserInfo fo) {
		return userMapper.queryUserInfo(fo);
	}

	@Override
	public void updateUserInfo(UserInfo fo) {
		 try {
			userMapper.updateUserInfo(fo);
		} catch (Exception e) {
			LOG.debug("语句错误原因", e);
		}
	}

	@Override
	public void updateUser(UserInfo fo) {
		 try {
			userMapper.updateUser(fo);
		} catch (Exception e) {
			LOG.debug("语句错误原因",e);
		}
	}
	
	/**
	 * Description:修改操作方法
	 * 
	 * @param fo
	 * @return
	*/
	@Override
	public Map<String, Object> isSaveOrUpdate(UserInfo fo){
		Map<String, Object> result = new HashMap<String, Object>();
		boolean flag = false;
		try {
			if( StringUtils.isNotBlank(fo.getSex()) || StringUtils.isNotBlank(fo.getProfession())
					|| StringUtils.isNotBlank(fo.getName()) || StringUtils.isNotBlank(fo.getNickName())){
				this.updateUserInfo(fo);
			}
			if( StringUtils.isNotBlank(fo.getMobile()) || StringUtils.isNotBlank(fo.getEmail())){
				this.updateUser(fo);
			}
			flag = true;
			result.put("isSuccess", flag); 
		} catch (Exception e) {
			LOG.debug("语句错误原因：", e);
			result.put("isSuccess", flag);
		}
		return result;
	}
	
	/**
	 * Description:查询用户详细信息
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public UserInfo queryAllUserInfo(UserInfo fo) {
		return userMapper.queryAllUserInfo(fo);
	}

	/**
	 * Description：查询财富排名
	 * 
	 * @return
	 */
	@Override
	public List<Map<String, Object>> queryTreasure(UserInfo fo) {
		List<Map<String, Object>> params = new ArrayList<Map<String,Object>>();
		List<UserInfo> userInfo = userMapper.queryTreasure(fo);
		for (UserInfo user : userInfo) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("useId", user.getUserId());
			map.put("balance", user.getBalance());
			map.put("level", user.getLevel());
			map.put("nickName", user.getNickName());
			// 返回的头像提示是全路径
			String filePath = user.getPicturePath();
			String urlPre = perfixUrl.replaceAll("\\\\", "/");
			if (StringUtils.isEmpty(filePath)) {
				String newDef = defaultIcon.replaceAll("\\\\", "/");
				user.setPicturePath(urlPre + "/" + newDef);
			} else {
				String newFileP = filePath.replaceAll("\\\\", "/");
				user.setPicturePath(urlPre + "/" + newFileP);
			}
			map.put("picturePath", user.getPicturePath());
			map.put("userId", user.getUserId());
			params.add(map);
		}
		return params;
	}

	/**
	 * Description:查询个人财富排名
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public UserInfo queryPersonTreasure(UserInfo fo) {
		return userMapper.queryPersonTreasure(fo);
	}

	
	@Override
	public List<Map<String, Object>> queryPoint(UserInfo fo) { 
		  return  userMapper.queryPoint(fo);
	}

	/**
	 * Description:查询余额详细信息
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public List<Map<String, Object>> queryBalanceDetail(UserInfo fo) {
		return userMapper.queryBalanceDetail(fo);
	}
	
	/**
	 * Description:查询答题记录
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public List<Map<String, Object>> queryAnswer(UserInfo fo) {
		fo.setPageSize(10);
		return userMapper.queryAnswer(fo);
	}

	/**
	 * Description:我的调查
	 * 
	 * @param
	 * @return
	 */
	@Override
	public List<Map<String, Object>> queryMySurvey(UserInfo fo) {
	    double reach;  
		List<Map<String, Object>> params = userMapper.queryMySurvey(fo);
		for (Map<String, Object> map : params) {
			long planCopy = (long)map.get("planCopy") ;
			long returnCopy = (long)map.get("returnCopy") ;
			reach = returnCopy % planCopy;
			map.put("reach",reach );
		}
			
		return params;
	}
	
	/**
	 * Description:共享调查
	 * 
	 * @return
	 */
	@Override
	public List<Map<String, Object>> queryShare() {
		return userMapper.queryShare();
	}

	/**
	 * Description:根据userId修改姓名
	 * 
	 * @param userId
	 * @return 
	 */
	@Override
	public void updateName(UserInfo fo) {
			 try {
				userMapper.updateName(fo);
			} catch (Exception e) {
				LOG.debug("错误原因:", e);
			}
	}

	/**
	 * Description:查看姓名是否存在
	 * 
	 * @param
	 * @return
	 */
	@Override
	public int queryName(String name) {
		return userMapper.queryName(name);
	}

	/**
	 * Description:根据userId修改昵称
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public void updateNickName(UserInfo fo) {
		try {
			userMapper.updateNickName(fo);
		} catch (Exception e) {
			LOG.debug("错误原因:", e);
		}
	}

	/**
	 * Description:查询昵称是否存在
	 * 
	 * @param
	 * @return
	 */
	@Override
	public int queryNickName(String nickName) {
		return userMapper.queryNickName(nickName);
	}

	/**
	 * Description:修改密码
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public void updatePwd(UserInfo fo) {
		try {
			userMapper.updatePwd(fo);
		} catch (Exception e) {
			LOG.debug("错误原因:", e);
		}
	}

	/**
	 * Description:查询原密码
	 * 
	 * @param userId
	 * @return
	 * 
	 */
	@Override
	public String queryPwd(String userId) {
		return userMapper.queryPwd(userId);
	}

	/**
	 * Description:修改性别
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public void updateSex(UserInfo fo) {
		try {
			userMapper.updateSex(fo);
		} catch (Exception e) {
			LOG.debug("错误原因:", e);
		}
	}

	/**
	 * Description:修改职业
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public void updateProfession(UserInfo fo) {
		try {
			if(StringUtils.isNotBlank(fo.getProfession())){
				userMapper.updateProfession(fo);
			}
		} catch (Exception e) {
			LOG.debug("错误原因:", e);
		}
	}

	/**
	 * Description:修改手机
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public void updateMobile(UserInfo fo) {
		try {
			userMapper.updateMobile(fo);
		} catch (Exception e) {
			LOG.debug("错误原因:",e);
		}
	}

	/**
	 * Description:修改email
	 * 
	 * @param fo
	 * @return
	 */
	@Override
	public void updateEmail(UserInfo fo) {
		try {
			userMapper.updateEmail(fo);
		} catch (Exception e) {
			LOG.debug("错误原因:", e);
		}
	}

	/**
	 * 上传头像
	 */
	@Override
	public String uploadFile(UserInfo fo, String baseUrl, byte[] bfile, String fileName) {
		// 用户层级文件路径
		String filePathName = UserInfoContants.HEAD_PIC_PATH + AuthContants.FILE_SEPARATOR  + fo.getUserId();
		// 全路径-去除fileName
		String filePath = baseUrl + AuthContants.FILE_SEPARATOR + filePathName;
		// 保存文件
		String fileAbsolutPath = CommonUtil.getFile(bfile, filePath, fileName);
		// 返回文件相对路径
		String saveFilePathName = null;
		if (!StringUtils.isEmpty(fileAbsolutPath)) {
			// 保存url到数据库中
			saveFilePathName = filePathName + AuthContants.FILE_SEPARATOR + fileName;
			fo.setPicturePath(saveFilePathName);
			userMapper.updatePicturePath(fo);
		}
		return saveFilePathName;
	}

	@Override
	public UserInfo queryPersonalGrade(UserInfo fo) {
		return userMapper.queryPersonalGrade(fo);
	}

	@Override
	public List<Map<String, Object>> queryAllGrade(UserInfo fo) {
		List<Map<String, Object>> params = new ArrayList<Map<String,Object>>();
		List<UserInfo> userInfo = userMapper.queryAllGrade(fo);
		for (UserInfo user : userInfo) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("grade", user.getGrade());
			map.put("level", user.getLevel());
			map.put("nickName", user.getNickName());
			// 返回的头像提示是全路径
			String filePath = user.getPicturePath();
			String urlPre = perfixUrl.replaceAll("\\\\", "/");
			if (StringUtils.isEmpty(filePath)) {
				String newDef = defaultIcon.replaceAll("\\\\", "/");
				user.setPicturePath(urlPre + "/" + newDef);
			} else {
				String newFileP = filePath.replaceAll("\\\\", "/");
				user.setPicturePath(urlPre + "/" + newFileP);
			}
			map.put("picturePath", user.getPicturePath());
			map.put("userId", user.getUserId());
			params.add(map);
		}
		return params;
	}

	@Override
	public void updateUserInfoByParamKey(Map<String, Object> paramMap) {
		//判断传参修改的字段是否在可修改字段的白名单中
		if(UserInfoContants.WHITELIST.indexOf(paramMap.get("paramKey").toString()) != -1){
		if(paramMap.get("paramKey").equals("nickName")){
			paramMap.put("paramKey", "nick_name");
		}
		if(paramMap.get("paramKey").equals("mobile") || paramMap.get("paramKey").equals("email")){
			userMapper.updateUserByParamKey(paramMap);
		}else{
			userMapper.updateUserInfoByParamKey(paramMap);
		}
		
		}else{
			LOG.debug("不合法的修改操作");
		}
	}

	@Override
	public String checkOldPwd(UserInfo fo) {
		String oldPwd=userMapper.queryPwd(fo.getUserId());
		return oldPwd;
	}
}
