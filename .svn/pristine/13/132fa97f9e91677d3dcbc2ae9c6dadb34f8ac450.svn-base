/**
 * 
 */
package com.paic.pawj.basic.grade.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.paic.pawj.basic.grade.dao.Grade;
import com.paic.pawj.basic.grade.dao.GradeMapper;
import com.paic.pawj.basic.grade.service.GradeService;
import com.paic.pawj.basic.user.dto.UserInfo;

/**
 * Description:AuthService实现类
 * 
 * @author pc1
 * @version
 */
@Service("gradeService")
public class GradeServiceImpl implements GradeService {
	
	/**
	 * log
	 */
	private static final Log LOG = LogFactory.getLog(GradeServiceImpl.class);
    
    @Resource
    private GradeMapper gradeDao;
    
    @Transactional(rollbackFor = Exception.class)
    @Override
	public Map<String, Object> getUserGrade(UserInfo fo) {
    	Map<String, Object> returnMap = new HashMap<String, Object>();
    	// 获得用户当前等级
    	getUserCurrentGrade(fo);
    	// 升级
    	setUserGrade(fo);
    	// 升级后的等级
    	putFo(fo, returnMap);
    	// 答题记录统计
    	StringBuilder gradeNextRule = new StringBuilder();
    	getAnswerInfo(fo, gradeNextRule);
    	// 升级后返回下一级的升级策略
    	getNextGradeInfo(fo, returnMap, gradeNextRule);
		return returnMap;
	}

    /**
     * 获得用户当前的等级
     * @param userId
     */
    private void getUserCurrentGrade(UserInfo fo) {
    	Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("userId", fo.getUserId());
		Map<String, Object> gradeMap = gradeDao.getUserCurrentGrade(paramMap);
		if (null != gradeMap) {
			if (null != gradeMap.get("grade")) {
				fo.setGrade((Integer)gradeMap.get("grade"));
			}
			if (null != gradeMap.get("gradeName")) {
				fo.setGradeName((String)gradeMap.get("gradeName"));
			}
		}
	}

	/**
     * 升级后的等级
     * @param fo
     * @param returnMap
     */
	private void putFo(UserInfo fo, Map<String, Object> returnMap) {
		String gradeName = fo.getGradeName();
    	if (null == gradeName) {
    		gradeName = "";
    	}
    	returnMap.put("grade", fo.getGrade());
		returnMap.put("gradeName", gradeName);
	}
    
    /**
     * 获得答题统计
     * @param fo
     * @param returnMap
     */
    private void getAnswerInfo(UserInfo fo, StringBuilder gradeNextRule) {
    	// 累计答题记录
		int condiAnsQuantity = getAnswerTimes(fo.getUserId());
		// 获得最近30天答题份数
		int condiAnsQuantity30 = getAnswerTimesDays(fo.getUserId(), 30);
		gradeNextRule.append("你已经累计答题" + condiAnsQuantity + "份，最近30天内完成了" + condiAnsQuantity30 + "份");
	}

	/**
     * 返回下一级的升级策略
     */
    private void getNextGradeInfo(UserInfo fo, Map<String, Object> returnMap, StringBuilder gradeNextRule) {
    	try {
			// 获得当前用户的下一个等级
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("userId", fo.getUserId());
			int grade = gradeDao.getUserNextGrade(paramMap);
			if (grade != 0) {
				gradeNextRule.append("，");
				paramMap.put("grade", grade);
				List<Grade> gradeList = gradeDao.queryUserGrade(paramMap);
				// 连续活跃天数
				int condiContinuity = 0;
				// 累计参与调查的次数
				int condiAnsQuantityConfig = 0;
				// 前次活跃天数
				int condiPrevActivity = 0;
				boolean cuntFlag = false;
				int cnt = 0;
				int len = gradeList.size();
				for (Grade obj : gradeList) {
					cnt++;
					cuntFlag = false;
					// 连续活跃天数
					condiContinuity = obj.getCondiContinuity();
					// 累计参与调查的次数
					condiAnsQuantityConfig = obj.getCondiAnsQuantity();
					// 前次活跃天数
					condiPrevActivity = obj.getCondiPrevActivity();
					if (condiContinuity > 0) {
						cuntFlag = true;
						gradeNextRule.append("连续活跃" + condiContinuity + "天");
					}
					if (condiAnsQuantityConfig > 0) {
						if (cuntFlag) {
							gradeNextRule.append("并且");
						}
						cuntFlag = true;
						gradeNextRule.append("再答题" + condiAnsQuantityConfig + "份");
					}
					if (condiPrevActivity > 0) {
						if (cuntFlag) {
							gradeNextRule.append("并且");
						}
						cuntFlag = true;
						gradeNextRule.append("上次活跃时间距离今天不超过" + condiAnsQuantityConfig + "天");
					}
					if (cnt < len && cuntFlag) {
						gradeNextRule.append("或者");
					}
					if (cnt == len) {
						gradeNextRule.append("就可以升级啦！");
					}
				}
			} else {
				gradeNextRule.append("。");
			}
			returnMap.put("gradeRule", gradeNextRule.toString());	
		} catch (Exception e) {
			LOG.error("获得用户等级失败，失败原因：", e);
		}
    }
    
    /**
     * 根据升级策略，升级
     * @param fo
     */
	public void setUserGrade(UserInfo fo) {
		try {
			// 获得当前用户的下一个等级
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("userId", fo.getUserId());
			int grade = gradeDao.getUserNextGrade(paramMap);
			if (grade != 0) {
				paramMap.put("grade", grade);
				List<Grade> gradeList = gradeDao.queryUserGrade(paramMap);
				//计算升级
				setUserInfoGrade(fo, paramMap, gradeList);
			}
		} catch (Exception e) {
			LOG.error("获得用户等级失败，失败原因：", e);
		}
	}

	/**
	 * 计算用户升级
	 * @param fo
	 * @param paramMap
	 * @param gradeList
	 */
	private void setUserInfoGrade(UserInfo fo, Map<String, Object> paramMap,
			List<Grade> gradeList) {
		// 连续活跃天数
		int condiContinuity = 0;
		// 累计参与调查的次数
		int condiAnsQuantityConfig = 0;
		int condiAnsQuantity = getAnswerTimes(fo.getUserId());
		// 前次活跃天数
		int condiPrevActivity = 0;
		boolean cuntFlag = false;
		for (Grade obj : gradeList) {
			cuntFlag = false;
			// 1.连续活跃天数
			condiContinuity = obj.getCondiContinuity();
			if (condiContinuity > 0) {
				if (condiContinuity == getActiveDays(fo.getUserId(), condiContinuity)) {
					cuntFlag = true;
				}
			}
			// 2.累计参与调查的次数
			if (cuntFlag) {
				cuntFlag = false;
				condiAnsQuantityConfig = obj.getCondiAnsQuantity();
				if (condiAnsQuantity >= condiAnsQuantityConfig) {
					cuntFlag = true;
				}
			}
			// 3.前次活跃天数
			if (cuntFlag) {
				cuntFlag = false;
				condiPrevActivity = obj.getCondiPrevActivity();
				if (getPervLoingTime(fo.getUserId(), condiPrevActivity)) {
					cuntFlag = true;
				}
			}
			// 判断是否升级
			if (cuntFlag) {
				// 升级
				gradeDao.updateUserInfoGrade(paramMap);
				fo.setGrade(obj.getGrade());
				fo.setGradeName(obj.getGradeName());
				break;
			}
		}
	}

	/**
	 * 获得连续活跃天数，大于N天
	 */
	private int getActiveDays(String userId, int days){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("userId", userId);
		paramMap.put("days", days);
		return gradeDao.getActiveDays(paramMap);
	}
	
	/**
	 * 获得参与调查问卷次数，大于N次
	 */
	private int getAnswerTimes(String userId){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("userId", userId);
		return gradeDao.getAnswerTimes(paramMap);
	}
	
	/**
	 * 获得参与调查问卷次数，days天内的答题记录
	 */
	private int getAnswerTimesDays(String userId, int days){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("userId", userId);
		paramMap.put("days", userId);
		return gradeDao.getAnswerTimesDays(paramMap);
	}
	
	/**
	 * 获得上次登录时间
	 * 当前活跃天数-除当天以外的最近一次活跃时间，距离当天的天数不得多于N天
	 */
	private boolean getPervLoingTime(String userId, int days){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("userId", userId);
		paramMap.put("days", days);
		int cnt = gradeDao.getActiveDays(paramMap);
		return cnt > 0;
	}

}
