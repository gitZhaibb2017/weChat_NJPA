package com.paic.pawj.common.util;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class CommonUtil {

	public static final Log LOG = LogFactory.getLog(CommonUtil.class);
	
	/**
	 * 加密
	 * @param strSrc
	 * @return
	 */
	public static String shaEncrypt(String strSrc) {
		MessageDigest md = null;
		String strDes = null;
		byte[] bt = strSrc.getBytes();
		try {
			md = MessageDigest.getInstance("SHA-256");// 将此换成SHA-1、SHA-512、SHA-384等参数
			md.update(bt);
			strDes = bytes2Hex(md.digest()); // to HexString
			System.out.println(strDes);
		} catch (NoSuchAlgorithmException e) {
			return null;
		}
		return strDes;
	}

	private static String bytes2Hex(byte[] bts) {
		String des = "";
		String tmp = null;
		for (int i = 0; i < bts.length; i++) {
			tmp = (Integer.toHexString(bts[i] & 0xFF));
			if (tmp.length() == 1) {
				des += "0";
			}
			des += tmp;
		}
		return des;
	}
	
	/**
	 * 获得uuid
	 */
	public static String getUUID() {
		return UUID.randomUUID().toString().replaceAll("-", "");
	}
	
	/**
	 * 根据byte数组生成文件
	 */
	public static String getFile(byte[] bfile, String filePath, String fileName) {
		BufferedOutputStream  bos = null;
		FileOutputStream fos = null;
		File file = null;
		String fileAbsolutPath = null;
		try {
			File dir = new File(filePath);
			if (!dir.exists() && !dir.isDirectory()) {
				dir.mkdirs();
			}
			file = new File(dir.getAbsolutePath() + "/" + fileName);
			fos = new FileOutputStream(file);
			bos = new BufferedOutputStream(fos);
			bos.write(bfile);
			bos.flush();
			fileAbsolutPath = file.getAbsolutePath();
		} catch (Exception e) {
			LOG.info("生成文件，错误原因：", e);
		} finally {
			if (bos != null) {
				try {
					bos.close();
				} catch (IOException e) {
					LOG.info("关闭流，错误原因：", e);
				}
			}
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					LOG.info("关闭流，错误原因：", e);
				}
			}
		}
		return fileAbsolutPath;
	}
	
	/**
	 * 获得随机数
	 * @param min
	 * @param max
	 * @return
	 */
	public static int getRandNum(int min, int max) {
	    int randNum = min + (int)(Math.random() * ((max - min) + 1));
	    return randNum;
	}
}
