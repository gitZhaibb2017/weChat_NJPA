package com.paic.pawj.basic.user.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.MultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import sun.misc.BASE64Decoder;

import com.paic.pawj.auth.common.contants.AuthContants;
import com.paic.pawj.auth.service.AuthService;
import com.paic.pawj.basic.interceptor.SessionUserInfo;
import com.paic.pawj.basic.user.common.contants.UserInfoContants;
import com.paic.pawj.basic.user.dto.UserInfo;
import com.paic.pawj.basic.user.servie.UserInfoService;

/**
 * Description:用户查询Controller
 * 
 * @author pc1
 * @version
 */
@Controller
@RequestMapping("/app/person/")
public class UserInfoController {

	public static final Log LOG = LogFactory.getLog(UserInfoController.class);

	@Resource
	private UserInfoService userInfoService;

	@Autowired
	private AuthService authService;

	/**
	 * 上传文件路径
	 */
	@Value("${pawj.baseUrl}")
	private String baseUrl;

	/**
	 * 上传文件返回前缀路径
	 */
	@Value("${pawj.perfixUrl}")
	private String perfixUrl;

	/**
	 * 上传文件返回前缀路径
	 */
	@Value("${pawj.defaultIcon}")
	private String defaultIcon;

	/**
	 * Description:用户Controller
	 * 
	 * @param userId
	 * @param pwd
	 * @return
	 */
	@RequestMapping("userInfo.do")
	@ResponseBody
	public Map<String, Object> queryUserInfoString(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> result = new HashMap<String, Object>();
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		UserInfo userInfo = userInfoService.queryUserInfo(fo);
		if(null==userInfo){
			result.put("infoMsg", "fail");
			return result;
		}
		result.put("userName", userInfo.getUserName());
		result.put("nickname", userInfo.getNickName());
		result.put("sex", userInfo.getSex());
		result.put("profession", userInfo.getProfession());
		result.put("mobile", userInfo.getMobile());
		result.put("email", userInfo.getEmail());
		return result;
	}

	/**
	 * Description:修改用户
	 * 
	 * @param foupdateUserInfo
	 *            .do
	 * @return
	 */
	@RequestMapping("updateUserInfo.do")
	@ResponseBody
	public Map<String, Object> isSaveOrUpdate(@ModelAttribute UserInfo fo, HttpSession session) {
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		Map<String, Object> result = new HashMap<String, Object>();
		Map<String, Object> params = userInfoService.isSaveOrUpdate(fo);
		boolean flag = (boolean) params.get("isSuccess");
		if (flag) {
			result.put("msg", UserInfoContants.UPDATE_SUCC);
		} else {
			result.put("msg", UserInfoContants.UPDATE_FAIL);
		}
		return result;
	}

	/**
	 * Description:修改用户
	 * 
	 * @param foupdateUserInfo
	 *            .do
	 * @return
	 */
	@RequestMapping("updateUserInfoByKey.do")
	@ResponseBody
	public Map<String, Object> updateUserInfoByParamKey(String paramKey, String paramValue, HttpSession session) {
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		Map<String, Object> result = new HashMap<String, Object>();
		Map<String, Object> params = new HashMap<String, Object>();
		try {
			params.put("paramKey", paramKey);
			params.put("paramValue", paramValue);
			params.put("userId", suser.getUserId());
			userInfoService.updateUserInfoByParamKey(params);
			result.put("msg", UserInfoContants.UPDATE_SUCC);
		} catch (Exception e) {
			LOG.info("错误原因:", e);
			result.put("msg", UserInfoContants.UPDATE_FAIL);
		}
		return result;
	}

	/**
	 * Description:查询用户个人详细信息
	 * 
	 * @param fo
	 * @return
	 */
	@RequestMapping("queryUserInfo.do")
	@ResponseBody
	public Map<String, Object> queryAllUserInfo(@ModelAttribute UserInfo fo, HttpSession session) {

		Map<String, Object> result = new HashMap<String, Object>();
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		UserInfo userInfo = userInfoService.queryAllUserInfo(fo);
		if(null==userInfo){
			result.put("infoMsg", "fail");
			return result;
		}
		result.put("userName", userInfo.getUserName());
		result.put("name", userInfo.getName());
		result.put("nickName", userInfo.getNickName());
		result.put("sex", userInfo.getSex());
		result.put("email", userInfo.getEmail());
		result.put("mobile", userInfo.getMobile());
		result.put("profession", userInfo.getProfession());
		// 返回的头像提示是全路径
		String filePath = userInfo.getPicturePath();
		String urlPre = perfixUrl.replaceAll("\\\\", "/");
		if (StringUtils.isEmpty(filePath)) {
			String newDef = defaultIcon.replaceAll("\\\\", "/");
			userInfo.setPicturePath(urlPre + "/" + newDef);
		} else {
			String newFileP = filePath.replaceAll("\\\\", "/");
			userInfo.setPicturePath(urlPre + "/" + newFileP);
		}
		result.put("picturePath", userInfo.getPicturePath());
		result.put("level", userInfo.getLevel());
		result.put("score", userInfo.getScore());
		result.put("balance", userInfo.getBalance());
		result.put("grade", userInfo.getGrade());
		result.put("gradeName", userInfo.getGradeName());
		result.put("cardStatus", userInfo.getCardStatus());
		return result;
	}

	/**
	 * Description:查询个人财富榜排名
	 * 
	 * @param fo
	 * @return
	 */
	@RequestMapping("queryPersonTreasure.do")
	@ResponseBody
	public Map<String, Object> queryPersonBalance(UserInfo fo, HttpSession session) {
		Map<String, Object> result = new HashMap<String, Object>();
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		UserInfo userInfo = userInfoService.queryPersonTreasure(fo);
		if(null==userInfo){
			result.put("infoMsg", "fail");
			return result;
		}
		// 返回的头像提示是全路径
		String filePath = userInfo.getPicturePath();
		String urlPre = perfixUrl.replaceAll("\\\\", "/");
		if (StringUtils.isEmpty(filePath)) {
			String newDef = defaultIcon.replaceAll("\\\\", "/");
			userInfo.setPicturePath(urlPre + "/" + newDef);
		} else {
			String newFileP = filePath.replaceAll("\\\\", "/");
			userInfo.setPicturePath(urlPre + "/" + newFileP);
		}
		result.put("picturePath", userInfo.getPicturePath());
		result.put("nickname", userInfo.getNickName());
		result.put("level", userInfo.getLevel());
		result.put("balance", userInfo.getBalance());
		result.put("userId", userInfo.getUserId());
		return result;
	}

	/**
	 * Description:查询财富排名
	 * 
	 * @return
	 */
	@RequestMapping("queryTreasure.do")
	@ResponseBody
	public List<Map<String, Object>> queryTreasure(UserInfo fo) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		fo.setStart(0);
		fo.setPageSize(10);
		list = userInfoService.queryTreasure(fo);
		if(list.size()==0){
			Map<String,Object> resultMap = new HashMap<String,Object>();
			resultMap.put("infoMsg", "fail");
			list.add(resultMap);
		}
		
		return list;
	}

	/**
	 * Description:查询个人用户等级排名
	 * 
	 * @param fo
	 * @param session
	 * @return
	 */
	@RequestMapping("queryPersonalGrade.do")
	@ResponseBody
	public Map<String, Object> queryPersonalGrade(UserInfo fo, HttpSession session) {
		Map<String, Object> result = new HashMap<String, Object>();
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		UserInfo userInfo = userInfoService.queryPersonalGrade(fo);
		if(null==userInfo){
			result.put("infoMsg", "fail");
			return result;
		}
		// 返回的头像提示是全路径
		String filePath = userInfo.getPicturePath();
		String urlPre = perfixUrl.replaceAll("\\\\", "/");
		if (StringUtils.isEmpty(filePath)) {
			String newDef = defaultIcon.replaceAll("\\\\", "/");
			userInfo.setPicturePath(urlPre + "/" + newDef);
		} else {
			String newFileP = filePath.replaceAll("\\\\", "/");
			userInfo.setPicturePath(urlPre + "/" + newFileP);
		}
		result.put("picturePath", userInfo.getPicturePath());
		result.put("nickName", userInfo.getNickName());
		result.put("level", userInfo.getLevel());
		result.put("grade", userInfo.getGrade());
		result.put("userId", userInfo.getUserId());
		return result;
	}

	/**
	 * Description:查询所有用户等级排名
	 * 
	 * @param fo
	 * @return
	 */
	@RequestMapping("queryAllGrade.do")
	@ResponseBody
	public List<Map<String, Object>> queryAllGrade(UserInfo fo) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		fo.setStart(0);
		fo.setPageSize(10);
		list = userInfoService.queryAllGrade(fo);
		if(list.size()==0){
			Map<String,Object> resultMap = new HashMap<String,Object>();
			resultMap.put("infoMsg", "fail");
			list.add(resultMap);
		}
		return list;
	}

	/**
	 * Description:查詢分數
	 * 
	 * 
	 * @return
	 */
	@RequestMapping("queryPoint.do")
	@ResponseBody
	public List<Map<String, Object>> queryPoint(UserInfo fo, HttpSession session) {
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		List<Map<String, Object>> result = userInfoService.queryPoint(fo);
		if(result.size()==0){
			Map<String,Object> resultMap = new HashMap<String,Object>();
			resultMap.put("infoMsg", "fail");
			result.add(resultMap);
		}
		return result;
	}

	/**
	 * Description:查询余额详细信息
	 * 
	 * @param fo
	 * @return
	 */
	@RequestMapping("queryBalanceDetail.do")
	@ResponseBody
	public List<Map<String, Object>> queryBalanceDetail(UserInfo fo, HttpSession session) {
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		List<Map<String, Object>> result = userInfoService.queryBalanceDetail(fo);
		if(result.size()==0){
			Map<String,Object> resultMap = new HashMap<String,Object>();
			resultMap.put("infoMsg", "fail");
			result.add(resultMap);
		}
		return result;
	}

	/**
	 * Description:查询答题记录
	 * 
	 * @param fo
	 * @return
	 */
	@RequestMapping("queryAnswer.do")
	@ResponseBody
	public List<Map<String, Object>> queryAnswer(UserInfo fo, HttpSession session) {
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		List<Map<String, Object>> result = userInfoService.queryAnswer(fo);
		return result;
	}

	/**
	 * Description:我得调查
	 * 
	 * @param fo
	 * @return
	 */
	@RequestMapping("queryMySurvey.do")
	@ResponseBody
	public List<Map<String, Object>> queryMySurvey(UserInfo fo, HttpSession session) {
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		List<Map<String, Object>> result = userInfoService.queryMySurvey(fo);
		return result;
	}

	/**
	 * Description:共享调查
	 * 
	 * @return
	 */
	@RequestMapping("queryShare.do")
	@ResponseBody
	public List<Map<String, Object>> queryShare() {
		List<Map<String, Object>> result = userInfoService.queryShare();
		if(result.size()==0){
			Map<String,Object> resultMap = new HashMap<String,Object>();
			resultMap.put("infoMsg", "fail");
			result.add(resultMap);
		}
		return result;
	}

	/**
	 * Description:根据userId修改姓名
	 * 
	 * @param userId
	 * @param session
	 * @return
	 */
	@RequestMapping("updateName.do")
	@ResponseBody
	public Map<String, Object> updateName(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();

		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		try {
			userInfoService.updateName(fo);
			map.put("msg", UserInfoContants.UPDATE_SUCC);
		} catch (Exception e) {
			LOG.info("错误原因:", e);
			map.put("msg", UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	/**
	 * Description:根据userId修改昵称
	 * 
	 * @param userId
	 * @param session
	 * @return
	 */
	@RequestMapping("updateNickName.do")
	@ResponseBody
	public Map<String, Object> updateNickName(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		try {
			userInfoService.updateNickName(fo);
			map.put("msg", UserInfoContants.UPDATE_SUCC);
		} catch (Exception e) {
			LOG.info("错误原因:", e);
			map.put("msg", UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	/**
	 * Description:根据userId修改密码
	 * 
	 * @param userId
	 * @param session
	 * @return
	 */
	@RequestMapping("updatePwd.do")
	@ResponseBody
	public Map<String, Object> updatePwd(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
			fo.setUserId(suser.getUserId());
			userInfoService.updatePwd(fo);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_SUCC);
		} catch (Exception e) {
			LOG.error("错误的原因", e);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	@RequestMapping("checkOldPwd.do")
	@ResponseBody
	public Map<String, Object> checkOldPwd(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();
		SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		fo.setUserId(suser.getUserId());
		String oldPwd = userInfoService.checkOldPwd(fo);
		if (fo.getOldPwd().equals(oldPwd)) {
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_SUCC);
		} else {
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	/**
	 * Description:修改性别
	 * 
	 * @param fo
	 * @param session
	 * @return
	 */
	@RequestMapping("updateSex.do")
	@ResponseBody
	public Map<String, Object> updateSex(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
			fo.setUserId(suser.getUserId());
			userInfoService.updateSex(fo);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_SUCC);
		} catch (Exception e) {
			LOG.info("错误原因：", e);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	/**
	 * Description:修改职业
	 * 
	 * @param fo
	 * @param session
	 * @return
	 */
	@RequestMapping("updateProfession.do")
	@ResponseBody
	public Map<String, Object> updateProfession(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
			fo.setUserId(suser.getUserId());
			userInfoService.updateProfession(fo);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_SUCC);
		} catch (Exception e) {
			LOG.info("错误原因：", e);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	/**
	 * Description:修改手机
	 * 
	 * @param fo
	 * @param session
	 * @return
	 */
	@RequestMapping("updateMobile.do")
	@ResponseBody
	public Map<String, Object> updateMobile(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
			fo.setUserId(suser.getUserId());
			if (authService.checkCode(fo.getMobile(), fo.getCheckCode())) {
				userInfoService.updateMobile(fo);
				map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_SUCC);
			}else{
				map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_FAIL);
			}
		} catch (Exception e) {
			LOG.info("错误原因：", e);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	/**
	 * Description:修改eamil
	 * 
	 * @param fo
	 * @return
	 */
	@RequestMapping("updateEmail.do")
	@ResponseBody
	public Map<String, Object> updateEmail(@ModelAttribute UserInfo fo, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
			fo.setUserId(suser.getUserId());
			userInfoService.updateEmail(fo);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_SUCC);
		} catch (Exception e) {
			LOG.info("错误原因：", e);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	/**
	 * 上传文件-上传头像
	 * 
	 * @param fo
	 * @param fileNamequeryAllUserInfo
	 * @param fileContent
	 * @param session
	 * @return
	 */
	@RequestMapping("uploadFile.do")
	@ResponseBody
	public Map<String, Object> uploadFile(@ModelAttribute UserInfo fo, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
			fo.setUserId(suser.getUserId());
			// 生成文件
			String filePath = receiveFile(fo, request, response);
			map.put("filePath", perfixUrl + AuthContants.FILE_SEPARATOR + filePath);
		} catch (Exception e) {
			LOG.info("错误原因：", e);
			map.put(UserInfoContants.MSG, UserInfoContants.UPDATE_FAIL);
		}
		return map;
	}

	/**
	 * 生成文件
	 * 
	 * @param request
	 * @param response
	 */
	private String receiveFile(UserInfo fo, HttpServletRequest request, HttpServletResponse response) {
		String filePath = null;
		try {
			request.setCharacterEncoding("utf-8");
			response.setCharacterEncoding("utf-8");
			response.setContentType("text/html");
			String fileContent = request.getParameter("fileContent");
			String fileName = request.getParameter("fileName");
			if (null != fileContent) {
				// base64解密
				byte[] bfile = new BASE64Decoder().decodeBuffer(fileContent);
				for (int i = 0; i < bfile.length; i++) {
					if (bfile[i] < 0) {
						// 调整异常数据
						bfile[i] += 256;
					}
				}
				LOG.info("文件大小：" + bfile.length);
				// 保存文件
				filePath = userInfoService.uploadFile(fo, baseUrl, bfile, fileName);
			}
		} catch (Exception e) {
			LOG.info("错误原因：", e);
		}
		return filePath;
	}

	/**
	 * 文件上传-头像上传-file提交方式
	 * 
	 * @param session
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "uploadPicH5.do")
	@ResponseBody
	public Map<String, Object> uploadPic(HttpSession session, HttpServletRequest request) {
		// 返回参数map
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			SessionUserInfo suser = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
			UserInfo fo = new UserInfo();
			fo.setUserId(suser.getUserId());
			MultipartResolver resolver = new CommonsMultipartResolver(session.getServletContext());
			MultipartHttpServletRequest multiRequest = resolver.resolveMultipart(request);
			// 获得文件
			List<MultipartFile> files = multiRequest.getFiles("file");
			long fileSize = 0;
			if (!files.isEmpty()) {
				for (MultipartFile file : files) {
					String fileName = file.getOriginalFilename();
					// 文件内容
					byte[] fileContent = file.getBytes();
					fileSize = file.getSize();
					LOG.info("文件大小：" + fileSize);
					// 生成图片文件
					String filePath = userInfoService.uploadFile(fo, baseUrl, fileContent, fileName);
					returnMap.put("filePath", perfixUrl + AuthContants.FILE_SEPARATOR + filePath);
				}
			}
		} catch (Exception e) {
			LOG.error("上传图片失败，失败原因：", e);
		}
		// return
		return returnMap;
	}

	/**
	 * 登出
	 * 
	 * @param session
	 */
	@RequestMapping("logOut.do")
	@ResponseBody
	private void logOut(HttpSession session) {
		session.invalidate();
	}
}
