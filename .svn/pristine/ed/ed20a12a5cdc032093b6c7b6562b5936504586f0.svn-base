package com.paic.pawj.answer.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.paic.pawj.answer.dao.InvestigationComment;
import com.paic.pawj.answer.service.InvestigationCommentAppService;
import com.paic.pawj.answer.vo.CommentVO;
import com.paic.pawj.answer.vo.InvestigationCommentVO;
import com.paic.pawj.basic.account.dao.AccountQuery;
import com.paic.pawj.basic.account.service.AccountQueryService;
import com.paic.pawj.basic.interceptor.SessionUserInfo;
import com.paic.pawj.common.util.ReturnConstants;

@Controller
@RequestMapping("/app/answer/")
public class InvestigationCommentAppController {
	
	@Autowired
	private InvestigationCommentAppService commentService;
	
	@Autowired AccountQueryService accountQueryService;

	@RequestMapping("/investigationComments.do")
	@ResponseBody
	public String investigationComments(HttpSession session, @RequestBody String data){
		SessionUserInfo sessionUser = (SessionUserInfo)session.getAttribute(SessionUserInfo.SESSION_ID);
		JsonObject result = new JsonObject();
		Gson gson = new Gson();
		JsonObject json = gson.fromJson(data, JsonObject.class);
		InvestigationCommentVO invCommentVO = gson.fromJson(json.get("data"), InvestigationCommentVO.class);
		try 
		{
			invCommentVO.setAnswerer(sessionUser.getUserId());
			commentService.saveInvestigationComment(invCommentVO);
			result.addProperty(ReturnConstants.CODE_KEY, ReturnConstants.NORMAL_CODE);
			result.addProperty(ReturnConstants.MSG_KEY, "评价成功");
		}
		catch(Exception e)
		{ 
			e.printStackTrace();
		}
		return result.toString();
	}
	
	@RequestMapping("/theHottestComments.do")
	@ResponseBody
	public String theHottestComments(HttpSession session,String qsrId){
		SessionUserInfo sessionUser = (SessionUserInfo)session.getAttribute(SessionUserInfo.SESSION_ID);
		List<CommentVO> comments = new ArrayList<CommentVO>();
		List<InvestigationComment> list = commentService.queryHottestComments();
		CommentVO comment = null;
		for (InvestigationComment invComment : list)
		{
			comment = new CommentVO();
			comment.setCommentID(String.valueOf(invComment.getCommentID()));
			comment.setComment(invComment.getComment());
			comments.add(comment);
		}
		
		AccountQuery account = accountQueryService.queryAccountChangesByIvtg(sessionUser.getUserId(), qsrId);
		Gson gson = new Gson();
		JsonObject json = new JsonObject();
		json.add("comments", gson.toJsonTree(comments));
		json.add("account", gson.toJsonTree(account));
		json.addProperty(ReturnConstants.CODE_KEY, ReturnConstants.NORMAL_CODE);
		
		return json.toString();
	}
}
