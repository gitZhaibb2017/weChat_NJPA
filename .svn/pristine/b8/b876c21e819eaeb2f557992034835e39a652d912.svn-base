package com.paic.pawj.investigation.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.paic.pawj.answer.dao.AnswersMapper;
import com.paic.pawj.answer.dto.Answers;
import com.paic.pawj.investigation.controller.vo.InvestigationAppVO;
import com.paic.pawj.investigation.controller.vo.OptionAppVO;
import com.paic.pawj.investigation.controller.vo.QuestionAppVO;
import com.paic.pawj.investigation.dao.AnswererInvestigation;
import com.paic.pawj.investigation.dao.AnswererInvestigationMapper;
import com.paic.pawj.investigation.dao.OptionQueryDTO;
import com.paic.pawj.investigation.dao.OptionQueryDTOMapper;
import com.paic.pawj.investigation.service.InvestigationAppService;

@Service("investigationAppService")
public class InvestigationAppServiceImpl implements InvestigationAppService {
	@Resource
	private OptionQueryDTOMapper optionQueryDAO;
	
	@Resource
	private AnswererInvestigationMapper answerInvDAO;
	
	@Resource
	private AnswersMapper ansersDAO;
	
	@Override
	public InvestigationAppVO investigationDetails(String investigationID,String userID) {
		List<OptionQueryDTO> list = optionQueryDAO.getAllOptionQueryDTOByInvID(investigationID);
		Answers answer = new Answers();
//		answer.setQsrId(investigationID);
		answer.setInvestigationId(investigationID);
		answer.setUserId(userID);
		Map<String, Answers> answersMap = answersToMap(ansersDAO.getUserAnswerByQsr(answer));
		InvestigationAppVO invVO = new InvestigationAppVO();
		boolean isSetBase = true;
		QuestionAppVO questionVO = null;
		String lastQstID = null;
		OptionAppVO optionVO = null;
		for (OptionQueryDTO optionQueryDto : list){
			setInvestigationBase(isSetBase, invVO, optionQueryDto);
			isSetBase = false;
			
			if (!optionQueryDto.getQuestionID().equals(lastQstID)){
				questionVO = new QuestionAppVO();
				questionVO.setQstId(optionQueryDto.getQuestionID());
				questionVO.setQsrId(invVO.getQsrId());
				questionVO.setQuestionName(optionQueryDto.getQuestionSubject());
				questionVO.setQuestionSeq(optionQueryDto.getQuestionSeq());
				questionVO.setQuestionType(optionQueryDto.getQuestionType());
				questionVO.setOptions(new ArrayList<OptionAppVO>());
				
				invVO.getQuestions().add(questionVO);
				lastQstID = optionQueryDto.getQuestionID();
			}
			
			optionVO = new OptionAppVO(optionQueryDto);
			setOptionAnswer(optionVO, answersMap);
			questionVO.getOptions().add(optionVO);
		}
		setAllQuestionStatus(invVO.getQuestions());
		return invVO;
	}
	
	private void setAllQuestionStatus(List<QuestionAppVO> list)
	{
		for (QuestionAppVO questionVO : list)
		{
			// 设置上一题的答题状态
			setQusetionAnswerStatus(questionVO);
		}
	}
	
	private void setInvestigationBase(boolean flag, 
			InvestigationAppVO inv, OptionQueryDTO dto){
		if (flag){
			inv.setQsrId(dto.getInvestigationID());
			inv.setQsrName(dto.getInvestigationName());
			inv.setQuestions(new ArrayList<QuestionAppVO>());
		}
	}

	@Override
	public List<AnswererInvestigation> newInvestigationPage(AnswererInvestigation queryInfo) {
		return answerInvDAO.getNewInvPage(queryInfo);
	}
	
	private Map<String, Answers> answersToMap(List<Answers> answers)
	{
		Map<String, Answers> answerMap = new HashMap<String, Answers>();
		for (Answers answer : answers)
		{
			answerMap.put(answer.getQuestionId(), answer);
		}
		
		return answerMap;
	}
	
	private void setOptionAnswer(OptionAppVO optionVO, Map<String, Answers> answersMap){
		Answers answer = answersMap.get(optionVO.getQstId());
//		if (null != answer){
//			if ("mc".equals(answer.getQtype()) ||
//					"mcs".equals(answer.getQtype()))
//			{
//				if (-1 != answer.getAnswerContent().indexOf(optionVO.getOptId())){
//					optionVO.setAnswerStatus(1);
//				}
//			} 
//			else if ("scr".equals(answer.getAnswerType()))
//			{
//				optionVO.setOptDesc(getAnswerByOptionID(answer.getAnswerContent(), optionVO.getOptId()));
//			}
//			else if ("q".equals(answer.getAnswerType()))
//			{
//				optionVO.setResult(answer.getAnswerContent());
//				if (StringUtils.isNotBlank(answer.getAnswerContent()))
//				{
//					optionVO.setAnswerStatus(1);
//				}
//			}
//		}
	}
	
	private String getAnswerByOptionID(String answerContent, String optionID)
	{
		String res = null;
		try 
		{
			res = answerContent.substring(answerContent.indexOf(optionID))
					.split(";", 2)[0].split(":", 2)[1];
		}
		catch (Exception e){
			
		}
		return res;
	}
	
	private void setQusetionAnswerStatus(QuestionAppVO question)
	{
		if (null != question && 0 == question.getQuestionStatus())
		{
			for(OptionAppVO option : question.getOptions())
			{
				if (1 == option.getAnswerStatus() ||
						StringUtils.isNotBlank(option.getOptDesc()))
				{
					question.setQuestionStatus(1);
					break;
				}
			}
		}
	}
	

}
