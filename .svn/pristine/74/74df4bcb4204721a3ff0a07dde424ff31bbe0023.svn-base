package com.paic.pawj.answer.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import com.paic.pawj.answer.controller.vo.AnswersVO;
import com.paic.pawj.answer.dao.Answers;
import com.paic.pawj.answer.dao.ParameterCommon;
import com.paic.pawj.answer.dao.ResultCommon;
import com.paic.pawj.answer.service.AnswersService;
import com.paic.pawj.basic.interceptor.SessionUserInfo;
import com.paic.pawj.common.util.ReturnConstants;

@Controller
public class AnswersrController {

	/**
	 * log
	 */
	private static final Log LOG = LogFactory.getLog(AnswersrController.class);
	
	private static final Logger LOGGER = Logger.getLogger(AnswersrController.class);

	@Autowired
	private AnswersService answersService;

	@RequestMapping("/answer/saveAnswers.do")
	@ResponseBody
	public String saveAnswers(HttpServletRequest request, HttpSession session) {
		ServletInputStream in = null;
		Reader reader = null;
		BufferedReader r = null;
		ResultCommon result = new ResultCommon();
		Gson gson = new Gson();
		try {
			in = request.getInputStream();
			reader = new InputStreamReader(in, "utf-8");
			r = new BufferedReader(reader);
			StringBuilder b = new StringBuilder();
			String line;
			while ((line = r.readLine()) != null) {
				b.append(line);
				b.append("\r\n");
			}
			String jsonStr = b.toString();
			LOGGER.info("------->>>>答题请求参数：" + jsonStr);

			Type answersListType = new TypeToken<ParameterCommon<List<Answers>>>() {
			}.getType();
			ParameterCommon<List<Answers>> parameterList = gson.fromJson(jsonStr, answersListType);
			if (parameterList == null) {
				result.setCode("0001");
				result.setMessage("答案列表为空，不做处理。");
				return gson.toJson(result);
			}

			SessionUserInfo userInfo = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
			List<Answers> answers = parameterList.getData();
			if (answers != null && !answers.isEmpty()) {

				Map<String, String> answersMap = new HashMap<String, String>();
				for (Answers answer : answers) {
					// 从session获取用户ID信息
					if (userInfo != null) {
						answer.setUserId(userInfo.getUserId());
					}
					LOGGER.info("------->>>>答题用户：" + answer.getUserId());

//					String mapkey = answer.getUserId() + "," + answer.getQsrId() + "," + answer.getQstId() + ","
//							+ answer.getAnswerType();
//					// 合并list中多选题和评分题
//					if (AnswerType.CHECK_TYPE_OPTION.equals(answer.getAnswerType())
//							|| AnswerType.RATING_TYPE_OPTION.equals(answer.getAnswerType())) {
//						String contentTmp = answersMap.get(mapkey);
//						if (contentTmp == null || "".equals(contentTmp)) {
//							answersMap.put(mapkey, answer.getAnswerContent());
//						} else {
//							answersMap.put(mapkey, contentTmp + ";" + answer.getAnswerContent());
//						}
//
//					} else {
//						answersMap.put(mapkey, answer.getAnswerContent());
//					}

				}

				// 保存合并后的数据到数据库
				for (Entry<String, String> entry : answersMap.entrySet()) {
					String contentkey = entry.getKey();
					String answerContent = entry.getValue();

					String[] contentkeys = contentkey.split(",");
					Answers answer = new Answers();
					answer.setUserId(contentkeys[0]);
//					answer.setQsrId(contentkeys[1]);
//					answer.setQstId(contentkeys[2]);
//					answer.setAnswerType(contentkeys[3]);
//					answer.setAnswerContent(answerContent);

					answersService.saveAnswers(answer);
				}
			}

			result.setCode("0");
			result.setMessage("保存答案成功。");
			result.setTrackId(parameterList.getTrackId());

			reader.close();
			r.close();
		} catch (Exception e) {
			e.printStackTrace();
			result.setCode("1000");
			result.setMessage("保存答案发生错误。");
		} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		return gson.toJson(result);
	}

	@RequestMapping("answer/queryQstnaireList.do")
	@ResponseBody
	public String queryQstnaireList() {
		List<Map<String, Object>> resultList = answersService.queryQstnaireList();
		Gson gson = new Gson();
		String resultStr = gson.toJson(resultList);
		return resultStr;
	}

	@RequestMapping("answer/queryQuestions.do")
	@ResponseBody
	public String queryQuestions() {
		return null;
	}

	@RequestMapping("answer/testQsr.do")
	@ResponseBody
	public String testQsr(String qsrId) {
		String p = answersService.getQsrCompletionPercent(qsrId);
		return p;
	}

	@RequestMapping("app/answer/answer.do")
	@ResponseBody
	public String answer(HttpSession session, @RequestBody String data) {
		LOGGER.info(data);
		System.out.println(data);
		SessionUserInfo userInfo = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		Gson gson = new Gson();
		JsonObject jsonO = gson.fromJson(data, JsonObject.class);
		int completed = jsonO.get("complete").getAsInt();
		List<AnswersVO> answers = gson.fromJson(jsonO.get("data"), new TypeToken<List<AnswersVO>>() {
		}.getType());
		JsonObject json = new JsonObject();
		try {
			answersService.answers(answers, userInfo.getUserId(), completed);
			json.addProperty("retCode", "0000");
			json.addProperty("retMsg", "答题成功");
		} catch (Exception e) {
			json.addProperty("retCode", "9998");
			json.addProperty("retMsg", "系统异常");
			LOGGER.error("答题失败", e);
		}

		return json.toString();
	}

	/**
	 * 单题答题-每次答题完成后自动根据答案推送下一题
	 */
	@RequestMapping(value = "/answer/answerOne.do")
	@ResponseBody
	public Map<String, Object> answerOne(HttpSession session, Answers answer) {
		// 返回参数map
		Map<String, Object> returnMap = new HashMap<String, Object>();
		SessionUserInfo userInfo = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		try {
			answersService.answerOne(answer, userInfo.getUserId());
		} catch (Exception e) {
			LOG.error("保存答题失败，失败原因：", e);
		}
		returnMap.put("infoMsg", "");
		// return
		return returnMap;
	}
	/**
	 * description: 答题翻页返回下一题
	 * 
	 * @param investigationId
	 * @param questionId
	 * @param optionId
	 */
	@RequestMapping("/answer/queryNextQuestion.do")
	@ResponseBody
	public String queryNextQuestion(@ModelAttribute Answers param,HttpSession session,HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException{
		JsonObject result = new JsonObject();
		Gson gson = new Gson();
		SessionUserInfo userInfo = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		//增加判断是否用户已经做过此问卷
		boolean isNot = answersService.isNotAnswered(param.getInvestigationId(), userInfo.getUserId());
		if (!isNot) {
			return "toQaRet";
		}
		result.addProperty(ReturnConstants.CODE_KEY, ReturnConstants.NORMAL_CODE);
		result.add("details",
				gson.toJsonTree(answersService.getNextQuestionByParam(param)));
		session.setAttribute("userId", userInfo.getUserId());
		return result.toString();
	}

}
