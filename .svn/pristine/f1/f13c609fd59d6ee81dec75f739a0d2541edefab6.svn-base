package com.paic.pawj.investigation.controller;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.paic.pawj.answer.service.AnswersService;
import com.paic.pawj.basic.interceptor.SessionUserInfo;
import com.paic.pawj.basic.redis.RedisClient;
import com.paic.pawj.basic.redis.RedisConstants;
import com.paic.pawj.common.util.ReturnConstants;
import com.paic.pawj.investigation.dao.AnswererInvestigation;
import com.paic.pawj.investigation.service.InvestigationAppService;

@Controller
@RequestMapping("/app/investigation/")
public class InvestigationAppController {

	@Autowired
	private InvestigationAppService investigationAppService;

	@Autowired
	private RedisClient redisClient;

	@Autowired
	private AnswersService answersService;

	@RequestMapping("investigationDetails.do")
	@ResponseBody
	public String investigationDetails(HttpSession session, @RequestParam("investigationID") String investigationID) {
		JsonObject result = new JsonObject();
		Gson gson = new Gson();
		SessionUserInfo userInfo = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		result.addProperty(ReturnConstants.CODE_KEY, ReturnConstants.NORMAL_CODE);
		result.add("details",
				gson.toJsonTree(investigationAppService.investigationDetails(investigationID, userInfo.getUserId())));
		return result.toString();

	}

	/**
	 * 微信方式问题的的详情
	 *
	 * @param session
	 * @param investigationID
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	@RequestMapping("investigationDetailsForWeChat.do")
	public void investigationDetailsForWeChat(HttpSession session,
			@RequestParam("investigationID") String investigationID, HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		JsonObject result = new JsonObject();
		Gson gson = new Gson();
		SessionUserInfo userInfo = (SessionUserInfo) session.getAttribute(SessionUserInfo.SESSION_ID);
		//增加判断是否用户已经做过此问卷
		boolean isNot = answersService.isNotAnswered(investigationID, userInfo.getUserId());
		if (!isNot) {
			request.getRequestDispatcher("/wxapp/h5/answer/qaRet.jsp").forward(request, response);
			return;
		}

		result.addProperty(ReturnConstants.CODE_KEY, ReturnConstants.NORMAL_CODE);
		result.add("details",
				gson.toJsonTree(investigationAppService.investigationDetails(investigationID, userInfo.getUserId())));
		session.setAttribute("userId", userInfo.getUserId());
		request.getRequestDispatcher("/wxapp/h5/answer/QA.jsp").forward(request, response);

	}

	@RequestMapping(value="newInvestigations.do")
	@ResponseBody
	public String queryNewQuestions(HttpServletRequest request,
			@RequestParam(defaultValue="0", value="start")int start,
			@RequestParam(defaultValue="25", value="limit" )int limit){
		JsonObject result = new JsonObject();
		Gson gson = new Gson();
		AnswererInvestigation queryInfo = new AnswererInvestigation();
		SessionUserInfo userInfo = getSessionUser(request);
		if (null != userInfo)
		{
			queryInfo.setUserID(userInfo.getUserId());
		}
		queryInfo.setStart(start);
		queryInfo.setEnd(limit);
		result.addProperty(ReturnConstants.CODE_KEY, ReturnConstants.NORMAL_CODE);
		result.add("investigations", gson.toJsonTree(
				investigationAppService.newInvestigationPage(queryInfo)));
		return result.toString();
	}

	private SessionUserInfo getSessionUser(HttpServletRequest request)
	{
		String token = null;
		String userInfoStr = null;
		SessionUserInfo userInfo =
				(SessionUserInfo)request.getSession().getAttribute(SessionUserInfo.SESSION_ID);
		if (null == userInfo)
		{
			if (null != request.getHeader("token"))
			{
				token = request.getHeader("token").toString();
			}
			if (StringUtils.isNotBlank(token))
			{
				userInfoStr = redisClient.get(RedisConstants.APP_TOKEN_PIX + token);
			}

			Gson gson = new Gson();
			userInfo = gson.fromJson(userInfoStr, SessionUserInfo.class);
		}
		return userInfo;
	}

}
