package com.paic.pawj.auth.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.MultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.paic.pawj.auth.common.contants.AuthContants;
import com.paic.pawj.auth.dao.Auth;
import com.paic.pawj.auth.service.AuthService;
import com.paic.pawj.basic.interceptor.SessionUserInfo;
import com.paic.pawj.basic.user.dao.User;
import com.paic.pawj.basic.user.dto.UserInfo;

@Controller
public class AuthController {

	/**
	 * log
	 */
	private static final Log LOG = LogFactory.getLog(AuthController.class);

	@Autowired
	private AuthService authService;
	
	/**
	 * 上传文件路径
	 */
	@Value("${pawj.baseUrl}")
	private String baseUrl;

	/**
	 * 上传文件返回前缀路径
	 */
	@Value("${pawj.perfixUrl}")
	private String perfixUrl;

	/**
	 * 注册
	 *
	 * @param user
	 * @return
	 */
	@RequestMapping(value = "auth/register.do")
	@ResponseBody
	public Map<String, Object> register(User user) {
		// 返回参数map
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			String returnFlag = authService.register(user);
			returnMap.put("infoMsg", returnFlag);
		} catch (Exception e) {
			returnMap.put("infoMsg", AuthContants.REGISTER_FAIL);
			LOG.error("注册失败，失败原因：", e);
		}
		// return
		return returnMap;
	}

	/**
	 * 注册4微信
	 *
	 * @param user
	 * @return
	 */
	@RequestMapping(value = "auth/register4Wechat.do")
	@ResponseBody
	public Map<String, Object> register4WeChat(String mobile, HttpSession session) {
		// 返回参数map
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			// 从session中获得相关信息
			if (null != session.getAttribute(SessionUserInfo.OPENID)) {
				String wechatId = (String) session.getAttribute(SessionUserInfo.OPENID);
				returnMap = authService.register4Wechat(wechatId, mobile);
				// 获得注册成功的userId，设置session
				setSessionUserInfo(session, returnMap);
			}
		} catch (Exception e) {
			returnMap.put("infoMsg", AuthContants.REGISTER_FAIL);
			LOG.error("注册失败，失败原因：", e);
		}
		// return
		return returnMap;
	}

	/**
	 * 获得注册成功的userId，设置session
	 * @param session
	 * @param returnMap
	 */
	private void setSessionUserInfo(HttpSession session,
			Map<String, Object> returnMap) {
		if (null != returnMap) {
			if (null != returnMap.get("userInfo")) {
				String userId = (String)returnMap.get("userInfo");
				SessionUserInfo user = new SessionUserInfo();
				user.setUserId(userId);
				session.setAttribute(SessionUserInfo.SESSION_ID, user);
			}
		}
	}

	/**
	 * 登录
	 */
	@RequestMapping(value = "auth/login.do")
	@ResponseBody
	public UserInfo login(HttpSession session,Auth auth) {
		// 返回参数
		UserInfo userInfo = null;
		try {
			userInfo = authService.login(auth);
			SessionUserInfo userIn = new SessionUserInfo();
			userIn.setUserId(userInfo.getUserId());
			session.setAttribute(SessionUserInfo.SESSION_ID, userIn);
		} catch (Exception e) {
			LOG.error("登录失败，失败原因：", e);
		}
		// return
		return userInfo;
	}

	/**
	 * App打开时检查令牌是否过期并在快到期时更换新的token
	 *
	 * @param token
	 *            原有的token
	 * @return 如果token过期，返回null，表示需要重新登录； 如果接近过期，则返回新的token，并延长token有效期
	 */
	@RequestMapping(value = "auth/checkToken.do")
	@ResponseBody
	public String checkToken(String token) {
		if (StringUtils.isBlank(token)) {
			return null;
		}
		return authService.checkToken(token);
	}

	//	/**
	//	 * 验证码校验
	//	 */
	//	@RequestMapping(value = "auth/inviteCode.do")
	//	@ResponseBody
	//	public Map<String, Object> inviteCode(String inviteCode, String userId) {
	//		// 返回参数map
	//		Map<String, Object> returnMap = new HashMap<String, Object>();
	//		String returnMsg = "0";
	//		try {
	//			returnMsg = authService.inviteCode(inviteCode, userId);
	//		} catch (Exception e) {
	//			LOG.error("校验失败，失败原因：", e);
	//		}
	//		returnMap.put("infoMsg", returnMsg);
	//		// return
	//		return returnMap;
	//	}

	@RequestMapping(value = "auth/checkCode.do")
	@ResponseBody
	public Map<String, Object> checkCode(String mobile, String checkCode) {
		// 返回参数map
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String returnMsg = "1";// "0"表示验证成功，"1"表示验证失败
		try {
			if (authService.checkCode(mobile, checkCode)) {
				returnMsg = "0";
			}
		} catch (Exception e) {
			LOG.error("校验失败，失败原因：", e);
		}
		returnMap.put("infoMsg", returnMsg);
		// return
		return returnMap;
	}

	/**
	 * 获得校验码
	 */
	@RequestMapping(value = "auth/getCheckCode.do")
	@ResponseBody
	public Map<String, Object> getCheckCode(String mobile){
		// 返回参数map
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String returnMsg = "1";// ali返回值"0"是成功
		try {
			returnMsg = authService.getCheckCode(mobile);
		} catch (Exception e) {
			LOG.error("获得校验码失败，失败原因：", e);
		}
		returnMap.put("infoMsg", returnMsg);
		// return
		return returnMap;
	}
	
	/**
	 * 校验用户是否合法
	 *
	 * @param user
	 * @return
	 */
	@RequestMapping(value = "auth/validateUserName.do")
	@ResponseBody
	public Map<String, Object> validateUserName(String loginName) {
		// 返回参数map
		Map<String, Object> returnMap = null;
		try {
			returnMap = authService.validateUserName(loginName);
		} catch (Exception e) {
			returnMap.put("infoMsg", AuthContants.REGISTER_FAIL);
			LOG.error("注册失败，失败原因：", e);
		}
		// return
		return returnMap;
	}
	
	/**
	 * 文件上传-设置图片题目
	 * @param session
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "auth/uploadPic.do")
	@ResponseBody
	public Map<String, Object> uploadPic(HttpSession session, HttpServletRequest request) {
		// 返回参数map
		Map<String, Object> returnMap = new HashMap<String, Object>();
		try {
			MultipartResolver resolver = new CommonsMultipartResolver(session.getServletContext());
			MultipartHttpServletRequest multiRequest = resolver.resolveMultipart(request);
			// 获得文件
			List<MultipartFile> files = multiRequest.getFiles("file");
			long fileSize = 0;
			if (!files.isEmpty()) {
				for (MultipartFile file : files) {
					String fileName = file.getOriginalFilename();
					// 文件内容
					byte[] fileContent = file.getBytes();
//					String contentType = file.getContentType();
					fileSize = file.getSize();
					LOG.info("文件大小：" + fileSize);
					// 生成图片文件
					String filePath = authService.uploadFile(baseUrl, fileName, fileContent);
					returnMap.put("filePath", filePath);
				}
			}
		} catch (Exception e) {
			LOG.error("上传图片失败，失败原因：", e);
		}
		// return
		return returnMap;
	}
	

}
