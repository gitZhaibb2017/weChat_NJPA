package com.paic.pawj.investigation.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.paic.pawj.investigation.dao.Investigation;
import com.paic.pawj.investigation.dao.InvestigationMapper;
import com.paic.pawj.investigation.dao.Question;
import com.paic.pawj.investigation.dao.QuestionOption;
import com.paic.pawj.investigation.service.InvestigationService;

@Service("investigationService")
public class InvestigationServiceImpl implements InvestigationService {

	@Resource
	InvestigationMapper dao;

	@Override
	public Map<String, Object> queryInvestigation(Investigation investigation) {
		// total rows
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("total", dao.queryInvestigationCount(investigation));
		resultMap.put("rows", dao.queryInvestigationList(investigation));
		return resultMap;
	}

	@Override
	public Map<String, Object> saveInvestigation(Investigation investigation, String isAdd) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		if ("".equals(investigation.getPlanStartTime()) || "".equals(investigation.getPlanEndTime())) {
			investigation.setPlanStartTime(null);
			investigation.setPlanEndTime(null);
		}
		if ((null == investigation.getInvestigationId() || "".equals(investigation.getInvestigationId()))
				|| "true".equals(isAdd)) {
			if (null == investigation.getInvestigationId() || "".equals(investigation.getInvestigationId())) {
				investigation.setInvestigationId(generateInvestigationId());
			}
			dao.saveInvestigation(investigation);
		} else {
			dao.updateInvestigation(investigation);
		}
		resultMap.put("investigationId", investigation.getInvestigationId());
		return resultMap;
	}

	@Override
	public Map<String, Object> deleteQuestion(List<String> investigationList) {
		// TODO Auto-generated method stub
		Map<String, Object> resultMap = new HashMap<String, Object>();
		dao.deleteQuestion(investigationList);
		return resultMap;
	}

	@Override
	public Map<String, Object> queryQuestionInfo(String qsrId) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Question> parentList = dao.getInvestigationQuestionList(qsrId);
		List<QuestionOption> subList = dao.getInvestigationQuestionOptionList(qsrId);
		for (Question questionVO : parentList) {
			List<QuestionOption> optionsList = new ArrayList<QuestionOption>();
			for (QuestionOption subVo : subList) {
				if (questionVO.getQuestionId().equals(subVo.getQuestionId())) {
					optionsList.add(subVo);
				}
			}
			questionVO.setOptions(optionsList);
		}
		resultMap.put("root", parentList);
		return resultMap;
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public Map<String, Object> saveSubQuestion(String jsonStr) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Gson gson = new Gson();
		Question[] questionWithOutOptionList = gson.fromJson(jsonStr, Question[].class);
		List<QuestionOption> questionOptionList = new ArrayList<QuestionOption>();
		int index = 1;
		for (Question question : questionWithOutOptionList) {
			if (null == question.getQuestionId() || "".equals(question.getQuestionId())) {
				question.setQuestionId(generateInvestigationId());
			}
			if (0 == question.getSeq()) {
				question.setSeq(index);
			}
			index++;
			int intDisplayOrder = 1;
			if (question.getQuestionType().equals("q")||question.getQuestionType().equals("blk")) {
				QuestionOption option = new QuestionOption();
				option.setOptionId(generateInvestigationId());
				option.setQuestionId(question.getQuestionId());
				option.setOptionCode("A");
				option.setDisplayOrder("1");
				option.setOptionName("[empty]");
				questionOptionList.add(option);
				continue;
			} else if ((question.getQuestionType().indexOf("mc") < 0 && !"scr".equals(question.getQuestionType()))
					|| (question.getOptions() == null || question.getOptions().size() == 0)) {
				continue;
			}
			for (QuestionOption option : question.getOptions()) {
				if (null == option.getOptionId() || "".equals(option.getOptionId())) {
					option.setOptionId(generateInvestigationId());
				}
				if (null == option.getQuestionId() || "".equals(option.getQuestionId())) {
					option.setQuestionId(question.getQuestionId());
				}
				option.setDisplayOrder(addZeroBeforeNumber(intDisplayOrder++, 5));
			}
			questionOptionList.addAll(question.getOptions());
		}

		dao.deleteQuestionInfo(questionWithOutOptionList[0].getInvestigationId());
		dao.saveQuestion(Arrays.asList(questionWithOutOptionList));
		if (questionOptionList.size() > 0) {
			dao.saveQuestionOption(questionOptionList);
		}
		dao.updateInvestigationQuestionNum(questionWithOutOptionList[0].getInvestigationId());
		return resultMap;
	}

	private String generateInvestigationId() {
		return UUID.randomUUID().toString().replaceAll("-", "").toUpperCase();
	}

	private static String addZeroBeforeNumber(int num, int size) {
		StringBuilder sb = new StringBuilder();
		double dividedNum = Math.pow(10, size - 1);
		if (num < dividedNum && size > 1) {
			return sb.append("0").append(addZeroBeforeNumber(num, size - 1)).toString();
		}
		return Integer.toString(num);
	}

}
