package com.paic.pawj.basic.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.paic.pawj.basic.redis.RedisClient;
import com.paic.pawj.basic.redis.RedisConstants;

public class SessionInterceptor implements HandlerInterceptor{
	private static final String TOKEN = "token";
	
    @Autowired
    private RedisClient redisClient;

	@Override
	public void afterCompletion(HttpServletRequest request, 
			HttpServletResponse response, Object arg2, Exception arg3)
			throws Exception 
	{

	}

	@Override
	public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)
			throws Exception {
		
	}

	@Override
	public boolean preHandle(HttpServletRequest request, 
			HttpServletResponse response, Object arg2) throws Exception {
		String token = null;
		String userInfoStr = null;
		SessionUserInfo userInfo = 
				(SessionUserInfo)request.getSession().getAttribute(SessionUserInfo.SESSION_ID);
		
		if (null != userInfo) 
		{
			return true;
		}
		
		if (null != request.getHeader(TOKEN))
		{
			token = request.getHeader(TOKEN).toString();
		}
		if (StringUtils.isNotBlank(token))
		{
			userInfoStr = redisClient.get(RedisConstants.APP_TOKEN_PIX + token);
		}
		

		if (StringUtils.isBlank(token) || StringUtils.isBlank(userInfoStr))
		{
			JsonObject jObj = new JsonObject();
			jObj.addProperty("retCode", "9999");
			jObj.addProperty("retMsg", "请登陆!");
			response.getWriter().print(jObj.toString());
			return false;
		} 
		Gson gson = new Gson();
		userInfo = gson.fromJson(userInfoStr, SessionUserInfo.class);
		request.getSession().setAttribute(SessionUserInfo.SESSION_ID, userInfo);
		
		return true;
	}

}
